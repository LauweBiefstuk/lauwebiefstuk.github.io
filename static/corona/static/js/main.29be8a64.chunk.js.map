{"version":3,"sources":["belgie.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","error","isLoaded","items","belgie","italie","fetch","then","res","json","result","obj","timelineitems","setState","countrydata","this","totaalBesmet","map","a","total_cases","totaalHersteld","total_recovered","totaalDoden","total_deaths","vandaagBesmet","total_new_cases_today","vandaagDood","total_new_deaths_today","arrayHistorie","Object","entries","arrayHistorieItalie","historie","historieItalie","pop","console","log","options","title","text","series","name","data","xAxis","visible","chart","type","width","height","optionsItalie","optionsTwee","optionsItalieTwee","className","message","src","logo","alt","id","highcharts","Highcharts","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.29be8a64.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/belgie.7bef4dde.png\";","import React from 'react';\nimport './App.css';\nimport Highcharts from 'highcharts'\nimport HighchartsReact from 'highcharts-react-official'\nimport logo from './belgie.png'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: [],\n      belgie: [],\n      italie: []\n    }\n  }\n\n  componentDidMount() {\n   fetch(\"https://thevirustracker.com/free-api?countryTimeline=BE\")\n     .then(res => res.json())\n     .then(\n       (result) => {\n         var obj = result.timelineitems\n         this.setState({\n           isLoaded: true,\n           items: obj[0],\n         })\n       },\n       // Note: it's important to handle errors here\n       // instead of a catch() block so that we don't swallow\n       // exceptions from actual bugs in components.\n       (error) => {\n         this.setState({\n           isLoaded: true,\n           error\n         });\n       }\n     )\n\n     fetch(\"https://thevirustracker.com/free-api?countryTimeline=IT\")\n       .then(res => res.json())\n       .then(\n         (result) => {\n           var obj = result.timelineitems\n           this.setState({\n             isLoaded: true,\n             italie: obj[0],\n           })\n         },\n         // Note: it's important to handle errors here\n         // instead of a catch() block so that we don't swallow\n         // exceptions from actual bugs in components.\n         (error) => {\n           this.setState({\n             isLoaded: true,\n             error\n           });\n         }\n       )\n\n     fetch(\"https://thevirustracker.com/free-api?countryTotal=BE\")\n       .then(res => res.json())\n       .then(\n         (result) => {\n           this.setState({\n             isLoaded: true,\n             belgie: result.countrydata,\n           })\n         },\n         // Note: it's important to handle errors here\n         // instead of a catch() block so that we don't swallow\n         // exceptions from actual bugs in components.\n         (error) => {\n           this.setState({\n             isLoaded: true,\n             error\n           });\n         }\n       )\n }\n\n  render() {\n    const { error, isLoaded, items, belgie, italie } = this.state;\n    var totaalBesmet = belgie.map(a => a.total_cases)\n    var totaalHersteld = belgie.map(a => a.total_recovered)\n    var totaalDoden = belgie.map(a => a.total_deaths)\n    var vandaagBesmet = belgie.map(a => a.total_new_cases_today)\n    var vandaagDood = belgie.map(a => a.total_new_deaths_today)\n    var arrayHistorie = Object.entries(items)\n    var arrayHistorieItalie = Object.entries(italie)\n    var historie = arrayHistorie.map(a => a[1].total_cases)\n    var historieItalie = arrayHistorieItalie.map(a => a[1].total_cases)\n    historie.pop()\n    historie.pop()\n    historieItalie.pop()\n    historieItalie.pop()\n    console.log(historie)\n\n    const options = {\n      title: {\n        text: 'Besmettingen in Belgie sinds 23/01/20'\n      },\n      series: [{\n        name: 'België',\n        data: historie\n      }],\n      xAxis: {\n        visible: false\n      },\n      chart: {\n        type: 'line',\n        width: 500,\n        height: 400\n      }\n    }\n\n    const optionsItalie = {\n      title: {\n        text: 'Besmettingen in Italie sinds 23/01/2020'\n      },\n      series: [{\n        name: 'Italië',\n        data: historieItalie\n      }],\n      xAxis: {\n        visible: false\n      },\n      chart: {\n        type: 'line',\n        width: 500,\n        height: 400\n      }\n    }\n    const optionsTwee = {\n      title: {\n        text: 'Besmettingen in Belgie sinds 23/01/20'\n      },\n      series: [{\n        name: 'België',\n        data: historie\n      }],\n      xAxis: {\n        visible: false\n      },\n      chart: {\n        type: 'line',\n        width: 300,\n        height: 400\n      }\n    }\n\n    const optionsItalieTwee = {\n      title: {\n        text: 'Besmettingen in Italie sinds 23/01/2020'\n      },\n      series: [{\n        name: 'Italië',\n        data: historieItalie\n      }],\n      xAxis: {\n        visible: false\n      },\n      chart: {\n        type: 'line',\n        width: 300,\n        height: 400\n      }\n    }\n\n    if (error) {\n      return <div><header className=\"App-header\">Error: {error.message}</header></div>;\n    } else if (!isLoaded) {\n      return <div><header className=\"App-header\">Loading...</header></div>;\n    } else {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Corona in België</h1>\n        <img src={logo} alt=\"BE\" id=\"belgie\"/>\n        <div>\n          <div className=\"flex\">\n              <div className=\"block\">\n                <h3>Totaal besmet</h3>\n                <h4 className=\"red\">{totaalBesmet}</h4>\n              </div>\n              <div className=\"block\">\n                <h3>Totaal Hersteld</h3>\n                <h4 className=\"green\">{totaalHersteld}</h4>\n              </div>\n              <div className=\"block\">\n                <h3>Totaal gestorven</h3>\n                <h4 className=\"red\">{totaalDoden}</h4>\n              </div>\n              <div className=\"block\">\n                <h3>Vandaag besmet</h3>\n                <h4 className=\"red\">+ {vandaagBesmet}</h4>\n              </div>\n              <div className=\"block\">\n                <h3>Vandaag gestorven</h3>\n                <h4 className=\"red\">+ {vandaagDood}</h4>\n              </div>\n          </div>\n        </div>\n        <h2 className=\"titel-vergelijking\">Vergelijking België - Italië</h2>\n        <div className=\"chartDisplay\">\n          <div className=\"chartGroot\"><HighchartsReact highcharts={Highcharts} options={options}/></div>\n          <div className=\"chartKlein\"><HighchartsReact highcharts={Highcharts} options={optionsTwee}/></div>\n          <div className=\"chartGroot\"><HighchartsReact highcharts={Highcharts} options={optionsItalie}/></div>\n          <div className=\"chartKlein\"><HighchartsReact highcharts={Highcharts} options={optionsItalieTwee}/></div>\n        </div>\n      </header>\n    </div>\n  )};\n}}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}